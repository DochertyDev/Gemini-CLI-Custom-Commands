description = "Generates a Mermaid.js diagram to visualize project structure at a high level by analyzing the codebase."
prompt = """
Your primary role is that of a software architect and analyst. Your task is to generate a HIGH-LEVEL Mermaid.js diagram representing the project's architecture by investigating the codebase.

Additional context from user (if provided): {{args}}

You will investigate the codebase and generate a text-based diagram definition focusing on architectural components rather than individual files. You must not make any changes to the existing code.

Here are the steps you MUST follow:

1.  **Determine Scope:**
    *   By default, analyze the entire project to create a high-level architectural overview.
    *   If `{{args}}` specifies a particular directory, component, or aspect of the codebase, adjust your analysis scope accordingly.
    *   If `{{args}}` requests more granular detail, you may increase the level of detail, but default to holistic views.

2.  **Codebase Investigation:**
    *   Use the `glob` and `read_many_files` tools to discover and read relevant source files within the determined scope.
    *   Focus on understanding the overall project structure: main directories, their purposes, and how they relate to each other.
    *   Identify architectural patterns (e.g., MVC, microservices, layered architecture).

3.  **Build Component-Level Architecture:**
    *   **Think in terms of MODULES and LAYERS, not individual files.**
    *   Group related files into logical components based on their directory structure and purpose (e.g., "Authentication Module", "API Layer", "UI Components", "Database Layer").
    *   Identify the PRIMARY relationships between these high-level components.
    *   Focus on showing data flow and dependencies between major architectural pieces.
    *   **LIMIT the diagram to 8-15 major components maximum** to ensure readability.

4.  **Generate Mermaid Diagram:**
    *   Convert your component-level architecture into valid Mermaid.js syntax.
    *   **IMPORTANT: Use a simple graph WITHOUT nested subgraphs. Define all nodes first, then define relationships.**
    *   Use `graph TD;` (Top-Down) or `graph LR;` (Left-to-Right) depending on what makes the architecture clearest.
    *   Each node should represent a COMPONENT or LAYER, not an individual file.
    *   Use descriptive labels that convey purpose (e.g., "User Interface", "Business Logic", "Data Access").
    *   You may use styling to group related components visually, but avoid complex nesting.
    *   Only show the most important connections between components.
    *   Consider using different arrow styles to indicate different relationship types:
      *   `-->` for standard dependencies
      *   `-.->` for optional/conditional dependencies
      *   `==>` for data flow
    *   **Use proper Mermaid syntax: Always end lines with semicolons and ensure node definitions are complete before connections.**

5.  **Create Output File:**
    *   Create a new file named `visualizationDiagram.md` in the /.context/ directory (or update it if it already exists).
    *   Your final output MUST be the creation of this file, containing only the complete Mermaid.js code inside a markdown code block.

Example of HIGH-LEVEL output structure (CORRECT FORMAT):
```mermaid
graph TD;
    UI[User Interface Layer];
    API[API Layer];
    Auth[Authentication Module];
    BL[Business Logic];
    DB[Database Layer];
    Cache[Caching Layer];
    External[External Services];

    UI --> API;
    API --> Auth;
    API --> BL;
    Auth -.-> DB;
    BL --> DB;
    BL --> Cache;
    Cache -.-> DB;
    BL --> External;

    style UI fill:#e1f5ff;
    style API fill:#fff4e1;
    style DB fill:#f0f0f0;
```

**CRITICAL SYNTAX RULES TO AVOID ERRORS:**
- Do NOT use nested subgraphs with nodes inside them
- Define ALL nodes at the top with their labels
- Then define ALL connections/relationships
- End each line with a semicolon
- Use simple node syntax: `NodeID[Label];`
- Keep it flat and simple - use styling for visual grouping instead of subgraphs

**CRITICAL GUIDELINES FOR READABILITY:**
- Treat directories as components, not containers of individual files
- Maximum 15 nodes in the entire diagram
- Each node represents a conceptual module or layer
- Only show dependencies between major components
- Prioritize clarity over completeness

Your final output should ONLY be this visualization. Create (or update if one exists) a `visualizationDiagram.md` file in the /.context/ directory.
"""